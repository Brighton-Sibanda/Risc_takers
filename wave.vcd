$date
	Mon Jan 29 18:32:11 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! halt $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module CPU $end
$var wire 2 $ MemSize [1:0] $end
$var wire 1 % MemWrEn $end
$var wire 32 & NPC [31:0] $end
$var wire 1 ' RWrEn $end
$var wire 32 ( RWrdata [31:0] $end
$var wire 5 ) Rdst [4:0] $end
$var wire 32 * StoreData [31:0] $end
$var wire 1 " clk $end
$var wire 3 + funct3 [2:0] $end
$var wire 7 , funct7 [6:0] $end
$var wire 1 ! halt $end
$var wire 1 # rst $end
$var wire 32 - opB_imm [31:0] $end
$var wire 32 . opA_imm [31:0] $end
$var wire 5 / Rsrc2 [4:0] $end
$var wire 5 0 Rsrc1 [4:0] $end
$var wire 32 1 Rdata2 [31:0] $end
$var wire 32 2 Rdata1 [31:0] $end
$var wire 32 3 RWrdataWire [31:0] $end
$var wire 32 4 PC_Plus_4 [31:0] $end
$var wire 32 5 PC [31:0] $end
$var wire 32 6 InstWord [31:0] $end
$var wire 32 7 DataWord [31:0] $end
$var wire 32 8 DataAddr [31:0] $end
$var reg 32 9 DataAddrMem [31:0] $end
$var reg 32 : DataAddrMem_next [31:0] $end
$var reg 32 ; DataAddrReg [31:0] $end
$var reg 2 < MemSizeReg [1:0] $end
$var reg 2 = MemSizeRegMem [1:0] $end
$var reg 2 > MemSizeRegMem_next [1:0] $end
$var reg 1 ? MemWrEnReg $end
$var reg 2 @ MemWrEnRegMem [1:0] $end
$var reg 2 A MemWrEnRegMem_next [1:0] $end
$var reg 32 B PCReg [31:0] $end
$var reg 32 C PCRegDec [31:0] $end
$var reg 32 D PCRegDec_next [31:0] $end
$var reg 32 E PCRegEx [31:0] $end
$var reg 32 F PCRegEx_next [31:0] $end
$var reg 32 G PCRegMem [31:0] $end
$var reg 32 H PCRegMem_next [31:0] $end
$var reg 32 I PCRegWb [31:0] $end
$var reg 32 J PCRegWb_next [31:0] $end
$var reg 1 K RWrEnReg $end
$var reg 2 L RWrEnRegMem [1:0] $end
$var reg 2 M RWrEnRegMem_next [1:0] $end
$var reg 2 N RWrEnRegWb [1:0] $end
$var reg 2 O RWrEnRegWb_next [1:0] $end
$var reg 32 P RWrdataReg [31:0] $end
$var reg 32 Q RWrdataRegMem [31:0] $end
$var reg 32 R RWrdataRegMem_next [31:0] $end
$var reg 32 S RWrdataRegWb [31:0] $end
$var reg 32 T RWrdataRegWb_next [31:0] $end
$var reg 32 U Rdata1_fin [31:0] $end
$var reg 32 V Rdata2_fin [31:0] $end
$var reg 5 W RdstReg [4:0] $end
$var reg 5 X RdstRegMem [4:0] $end
$var reg 5 Y RdstRegMem_next [4:0] $end
$var reg 5 Z RdstRegWb [4:0] $end
$var reg 5 [ RdstRegWb_next [4:0] $end
$var reg 5 \ Rdst_reg_ex [4:0] $end
$var reg 5 ] Rdst_reg_ex_next [4:0] $end
$var reg 5 ^ Rsrc1_reg_ex [4:0] $end
$var reg 5 _ Rsrc1_reg_ex_next [4:0] $end
$var reg 5 ` Rsrc2_reg_ex [4:0] $end
$var reg 5 a Rsrc2_reg_ex_next [4:0] $end
$var reg 32 b StoreDataReg [31:0] $end
$var reg 32 c StoreDataRegMem [31:0] $end
$var reg 32 d StoreDataRegMem_next [31:0] $end
$var reg 32 e ex_ford [31:0] $end
$var reg 6 f ex_ford_lab [5:0] $end
$var reg 6 g ex_ford_lab_next [5:0] $end
$var reg 32 h ex_ford_next [31:0] $end
$var reg 32 i fetch_reg_dec [31:0] $end
$var reg 32 j fetch_reg_dec_next [31:0] $end
$var reg 32 k fetch_reg_ex [31:0] $end
$var reg 32 l fetch_reg_ex_next [31:0] $end
$var reg 32 m fetch_reg_mem [31:0] $end
$var reg 32 n fetch_reg_mem_next [31:0] $end
$var reg 32 o fetch_reg_wb [31:0] $end
$var reg 32 p fetch_reg_wb_next [31:0] $end
$var reg 2 q forward_index [1:0] $end
$var reg 15 r forward_signals [14:0] $end
$var reg 3 s funct3Reg [2:0] $end
$var reg 3 t funct3_reg_ex [2:0] $end
$var reg 3 u funct3_reg_ex_next [2:0] $end
$var reg 7 v funct7Reg [6:0] $end
$var reg 7 w funct7RegMem [6:0] $end
$var reg 7 x funct7RegMem_next [6:0] $end
$var reg 7 y funct7RegWb [6:0] $end
$var reg 7 z funct7RegWb_next [6:0] $end
$var reg 1 { haltFlagReg $end
$var reg 32 | imm_reg_ex [31:0] $end
$var reg 32 } imm_reg_ex_next [31:0] $end
$var reg 1 ~ loadHalt $end
$var reg 1 !" loadHalted $end
$var reg 32 "" mem_ford [31:0] $end
$var reg 6 #" mem_ford_lab [5:0] $end
$var reg 6 $" mem_ford_lab_next [5:0] $end
$var reg 32 %" mem_ford_next [31:0] $end
$var reg 1 &" miss_predict $end
$var reg 1 '" miss_predicted $end
$var reg 5 (" next_stages [4:0] $end
$var reg 32 )" opA_immReg [31:0] $end
$var reg 32 *" opA_immRegMem [31:0] $end
$var reg 32 +" opA_immRegMem_next [31:0] $end
$var reg 32 ," opA_immRegWb [31:0] $end
$var reg 32 -" opA_immRegWb_next [31:0] $end
$var reg 32 ." opB_immReg [31:0] $end
$var reg 32 /" opB_immRegMem [31:0] $end
$var reg 32 0" opB_immRegWb [31:0] $end
$var reg 7 1" opcode_reg_ex [6:0] $end
$var reg 7 2" opcode_reg_ex_next [6:0] $end
$var reg 7 3" opcode_reg_mem [6:0] $end
$var reg 7 4" opcode_reg_mem_next [6:0] $end
$var reg 7 5" opcode_reg_wb [6:0] $end
$var reg 7 6" opcode_reg_wb_next [6:0] $end
$var reg 32 7" signed_tempReg [31:0] $end
$var reg 32 8" signed_temp_twoReg [31:0] $end
$var reg 5 9" stages [4:0] $end
$var reg 1 :" startReg $end
$var reg 32 ;" temp_addrReg [31:0] $end
$scope module DMEM $end
$var wire 32 <" Addr [31:0] $end
$var wire 32 =" AddrH [31:0] $end
$var wire 32 >" AddrW [31:0] $end
$var wire 1 " CLK $end
$var wire 32 ?" DataIn [31:0] $end
$var wire 2 @" Size [1:0] $end
$var wire 1 % WEN $end
$var reg 32 A" DataOut [31:0] $end
$upscope $end
$scope module EU $end
$var wire 7 B" auxFunc [6:0] $end
$var wire 3 C" func [2:0] $end
$var wire 32 D" opA [31:0] $end
$var wire 32 E" opB [31:0] $end
$var wire 32 F" signedopA [31:0] $end
$var wire 32 G" signedopB [31:0] $end
$var wire 32 H" out [31:0] $end
$var wire 32 I" mul_out [31:0] $end
$var reg 1 J" enable $end
$var reg 32 K" myOutput [31:0] $end
$scope module booth1 $end
$var wire 1 J" enable $end
$var wire 32 L" signedopA [31:0] $end
$var wire 32 M" signedopB [31:0] $end
$var wire 32 N" out [31:0] $end
$var reg 65 O" accumulator [64:0] $end
$var reg 65 P" addition_val [64:0] $end
$var reg 32 Q" cmpval [31:0] $end
$var reg 1 R" sign $end
$var integer 32 S" i [31:0] $end
$upscope $end
$upscope $end
$scope module IMEM $end
$var wire 32 T" AddrW [31:0] $end
$var wire 1 " CLK $end
$var wire 2 U" Size [1:0] $end
$var wire 32 V" Addr [31:0] $end
$var reg 32 W" DataOut [31:0] $end
$upscope $end
$scope module PC_REG $end
$var wire 1 " CLK $end
$var wire 32 X" Din [31:0] $end
$var wire 1 # RST $end
$var wire 1 Y" WEN $end
$var parameter 32 Z" width $end
$var reg 32 [" Qout [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 \" AddrA [4:0] $end
$var wire 5 ]" AddrB [4:0] $end
$var wire 5 ^" AddrW [4:0] $end
$var wire 1 " CLK $end
$var wire 32 _" DataInW [31:0] $end
$var wire 1 ' WenW $end
$var reg 32 `" DataOutA [31:0] $end
$var reg 32 a" DataOutB [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 Z"
$end
#180
$dumpvars
b1 a"
b0 `"
b11 _"
b111 ^"
b101 ]"
b100 \"
b10101100 ["
0Y"
b10101100 X"
b0 W"
b10101100 V"
b10 U"
b10101100 T"
bx S"
xR"
bx Q"
bx P"
b0 O"
b0 N"
b11 M"
b0 L"
b11 K"
0J"
b0 I"
b11 H"
b11 G"
b0 F"
b11 E"
b0 D"
b0 C"
b0 B"
bx A"
bx @"
bx ?"
bx00 >"
bx0 ="
bx <"
b10101100 ;"
0:"
b0 9"
bx 8"
b10001100 7"
bx 6"
bx 5"
bx 4"
bx 3"
b1100011 2"
b1100011 1"
bx 0"
bx /"
b11 ."
bx -"
bx ,"
bx +"
bx *"
b0 )"
b0 ("
0'"
0&"
b11 %"
b111 $"
b111 #"
b11 ""
0!"
0~
b10000101 }
b10000101 |
1{
bx z
bx y
bx x
bx w
b0 v
b100 u
b100 t
b0 s
b0 r
b10 q
b1000010100100001011001100011 p
b1000010100100001011001100011 o
b1000010100100001011001100011 n
b1000010100100001011001100011 m
b1000010100100100010001100011 l
b1000010100100100010001100011 k
b0 j
b0 i
b11 h
b111 g
b111 f
b11 e
bx d
bx c
bx b
b101 a
b101 `
b100 _
b100 ^
b1000 ]
b1000 \
b111 [
b111 Z
b111 Y
b111 X
b111 W
b1 V
b0 U
b11 T
b11 S
b11 R
b11 Q
b11 P
b1 O
b1 N
b1 M
b1 L
1K
b100000 J
b100000 I
b100000 H
b100000 G
b100100 F
b100100 E
b10101100 D
b10101100 C
b10101100 B
b1 A
b1 @
1?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
b0 6
b10101100 5
b10110000 4
b11 3
b0 2
b1 1
b100 0
b101 /
b0 .
b11 -
b0 ,
b0 +
bx *
b111 )
b11 (
1'
b10101100 &
1%
bx $
1#
0"
1!
$end
#780
